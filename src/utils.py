import json
import re

import settings
from prompts import system_prompt, user_prompt
from transformers import pipeline

# Load the pipeline
pipe = pipeline("text-generation", model=settings.LLM_NAME, trust_remote_code=True)


def run_filter(text):
    """
    Run the filter on the given text.

    Args:
        text (str): The input text to be filtered.

    Returns:
        str: The filtered text generated by the language model.

    This function takes an input text and runs it through a language model filter. It creates a list of messages,
    each with a role and content. The messages are then passed to the language model pipeline along with the
    generation arguments.
    """
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
        {"role": "user", "content": f"My text : {text}"},
    ]
    generation_args = {
        "max_new_tokens": settings.MAX_NEW_TOKENS,
        "return_full_text": True,
        "temperature": settings.TEMPERATURE,
        "do_sample": False,
    }
    output = pipe(messages, **generation_args)
    return output[0]["generated_text"][3]["content"]


def extract_json_from_string(text):
    """
    Extracts JSON-like structures from a given text and returns a tuple containing a list of parsed JSON objects and a list of errors.

    Args:
        text (str): The input text from which to extract JSON-like structures.

    Returns:
        tuple: A tuple containing two elements:
            - A list of parsed JSON objects (list).
            - A list of errors encountered during parsing (list of tuples).

    """

    objs = []
    errors = []

    # Use regex to find JSON-like structures in the text
    matches = re.findall(r"{.*}", text, re.DOTALL)
    if not matches:
        errors.append("No JSON patterns found")

    for index, json_string in enumerate(matches):
        try:
            # Load JSON object
            json_obj = json.loads(json_string)
            objs.append(json_obj)
        except json.JSONDecodeError as e:
            errors.append((index, json_string, f"JSONDecodeError: {e}"))
        except Exception as e:
            errors.append((index, json_string, f"Error: {e}"))

    return objs, errors
